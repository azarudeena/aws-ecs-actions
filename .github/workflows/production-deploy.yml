name: production-deploy
on:
  push:
    tags:
      - v1
      - v1.*
jobs:
  build:
    name: "Deployment"
    runs-on: "ubuntu-latest"
    steps:
      - name: "Checkout Code"
        uses: "actions/checkout@v2"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.PRODUCTION_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.PRODUCTION_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.PRODUCTION_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set outputs
        id: vars
        run: echo "::set-output name=tag::${GITHUB_REF#refs/*/}"

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_PRODUCTION_REPOSITORY_NAME }}
          IMAGE_TAG: ${{ steps.vars.outputs.tag }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition service --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: application
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE_PROD }}
          cluster: ${{ secrets.ECS_CLUSTER_PROD }}
          wait-for-service-stability: true

      - name: Post to a Slack channel on failure
        if: failure()
        id: slack-failure
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: 'C02GKJ3EPTM'  # Slack channel id to post message
          slack-message: 'PROD Deployment Failed'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}

      - name: Post to a Slack channel on success
        if: success()
        id: slack-success
        uses: slackapi/slack-github-action@v1.14.0
        with:
          channel-id: 'C02GKJ3EPTM'  # Slack channel id to post message
          slack-message: 'PROD Deployment success'
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_NOTIFICATIONS_BOT_TOKEN }}